import org.apache.commons.lang3.StringUtils
import groovy.grape.Grape
import groovy.io.FileType

ant.project.setName('perfLoad Demo Installer')

ConfigObject config = new ConfigSlurper().parse(new File('conf/DemoInstallerConfig.groovy').getText('UTF-8'))

target(welcome: 'Displays a welcome message showing version information.') {
	int len = 65
	String copyright = StringUtils.center('(c) 2013, mgm technology partners GmbH', len)
	String welcomeMsg = StringUtils.center('Welcome to perfLoad\'s Demo Installer 0.0.1-SNAPSHOT', len)

	List list1 = []
	(len + 2).times { list1 << '*' }
	String msg1 = list1.join()

	List list2 = ['*']
	len.times { list2 << ' ' }
	list2 << '*'
	String msg2 = list2.join()

	String message = """
	$msg1
	$msg2
	$msg2
	*${welcomeMsg}*
	*${copyright}*
	$msg2
	$msg2
	$msg1
	"""

	println message
}

target(init: 'Performs initialization tasks and checks.') {
	depends(welcome)

	input(
		message: 'Enter installation directory:',
		addProperty: 'perfloadHome',
		defaultValue:
		'../perfload-demo'
	)

	dir = new File(perfloadHome)
	if (dir.exists() && dir.list().length > 0) {
		input(message: 'Directory already exists and is not empty. Delete [y/n]?', addProperty: 'deleteHome', defaultValue: 'y')
		if ('y'.equalsIgnoreCase(deleteHome)) {
			delete(dir: perfloadHome)
			mkdir(dir: perfloadHome)
		} else {
			fail 'Cannot proceed due to existing installation directory. Exiting!'
		}
	}
}

target(downloadDistributions: 'Downloads distributions of perfLoad components.') {
	depends(init)

	System.setProperty('grape.root', "${perfloadHome}/download")

	config.versions.each {
		zip = [
			'groupId': 'com.mgmtp.perfload',
			'artifactId': "perfload-${it[0]}",
			'version': it[1],
			'type': 'zip',
			'classifier': 'dist',
			'transitive': false
		]

		echo "Downloading perfload-${it[0]}:${it[1]}..."
		Grape.grab(zip)
	}
}

target(unzipDistributions: 'Unzip downloaded distributions.') {
	depends(downloadDistributions)

	new File("${perfloadHome}/download").eachFileRecurse(FileType.FILES) {
		if (it ==~ /.*perfload-.*\.zip/) {
			unzip(src: it, dest: perfloadHome) {
				patternset {
					exclude(name: '**/*.default.*')
					exclude(name: '**/*_Default.*')
				}
			}
		}
	}

	delete(dir: '${perfloadHome}/download')
}

target(configureDistributions: 'Configures unzipped distributions') {
	depends(unzipDistributions)

	copy(todir: perfloadHome) {
		fileset(dir: 'demo-setup')
	}
}

target(install: 'Install the perfLoad demo setup') {
	depends(configureDistributions)
}

setDefaultTarget(install)